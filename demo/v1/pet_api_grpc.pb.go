// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: demo/v1/pet_api.proto

package gengo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PetAPIClient is the client API for PetAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetAPIClient interface {
	GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type petAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPetAPIClient(cc grpc.ClientConnInterface) PetAPIClient {
	return &petAPIClient{cc}
}

func (c *petAPIClient) GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*GetPetResponse, error) {
	out := new(GetPetResponse)
	err := c.cc.Invoke(ctx, "/demo.v1.PetAPI/GetPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/demo.v1.PetAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetAPIServer is the server API for PetAPI service.
// All implementations should embed UnimplementedPetAPIServer
// for forward compatibility
type PetAPIServer interface {
	GetPet(context.Context, *GetPetRequest) (*GetPetResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

// UnimplementedPetAPIServer should be embedded to have forward compatible implementations.
type UnimplementedPetAPIServer struct {
}

func (UnimplementedPetAPIServer) GetPet(context.Context, *GetPetRequest) (*GetPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetAPIServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafePetAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetAPIServer will
// result in compilation errors.
type UnsafePetAPIServer interface {
	mustEmbedUnimplementedPetAPIServer()
}

func RegisterPetAPIServer(s grpc.ServiceRegistrar, srv PetAPIServer) {
	s.RegisterService(&PetAPI_ServiceDesc, srv)
}

func _PetAPI_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetAPIServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.PetAPI/GetPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetAPIServer).GetPet(ctx, req.(*GetPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.PetAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetAPI_ServiceDesc is the grpc.ServiceDesc for PetAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v1.PetAPI",
	HandlerType: (*PetAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPet",
			Handler:    _PetAPI_GetPet_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PetAPI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo/v1/pet_api.proto",
}
